name: Build

on:
    push:
        branches:
            - master
        tags:
            - "v*"
    pull_request:
        branches:
            - master

jobs:
    Build:
        strategy:
            matrix:
                options:
                    - os: macos-latest
                      framework: netcoreapp3.1
                      runtime: -x64
                      codecov: false
                    - os: ubuntu-latest
                      framework: netcoreapp3.1
                      runtime: -x64
                      codecov: false
                    - os: windows-latest
                      framework: netcoreapp3.1
                      runtime: -x64
                      codecov: true
                    - os: windows-latest
                      framework: netcoreapp2.1
                      runtime: -x64
                      codecov: false

        runs-on: ${{matrix.options.os}}
        if: "!contains(github.event.head_commit.message, '[skip ci]')"

        steps:
            - uses: actions/checkout@v2

            # See https://github.com/actions/checkout/issues/165#issuecomment-657673315
            - name: Create LFS file list
              run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

            - name: Restore LFS cache
              uses: actions/cache@v2
              id: lfs-cache
              with:
                path: .git/lfs
                key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}-v1

            - name: Git LFS Pull
              run: git lfs pull

            - name: Install NuGet
              uses: NuGet/setup-nuget@v1

            - name: Setup Git
              shell: bash
              run: |
                  git config --global core.autocrlf false
                  git config --global core.longpaths true
                  git fetch --prune --unshallow
                  git submodule -q update --init --recursive

            - name: Setup Azurite
              if: matrix.options.os != 'windows-latest'
              shell: bash
              run: |
                  sudo npm install -g azurite
                  sudo azurite --loose &

            - name: Setup Azurite Windows
              if: matrix.options.os == 'windows-latest'
              shell: bash
              run: |
                  npm install -g azurite
                  azurite --loose &

            - name: Setup NuGet Cache
              uses: actions/cache@v2
              id: nuget-cache
              with:
                  path: ~/.nuget
                  key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/*.props', '**/*.targets') }}
                  restore-keys: ${{ runner.os }}-nuget-

            - name: Build
              shell: pwsh
              run: ./ci-build.ps1 "${{matrix.options.framework}}"
              env:
                SIXLABORS_TESTING: True

            - name: Test
              shell: pwsh
              run: ./ci-test.ps1 "${{matrix.options.os}}" "${{matrix.options.framework}}" "${{matrix.options.runtime}}" "${{matrix.options.codecov}}"
              env:
                  SIXLABORS_TESTING: True
                  XUNIT_PATH: .\tests\ImageSharp.Web.Tests # Required for xunit

            - name: Update Codecov
              uses: codecov/codecov-action@v1
              if: matrix.options.codecov == true && startsWith(github.repository, 'SixLabors')
              with:
                  flags: unittests

    Publish:
        needs: [Build]

        runs-on: windows-latest

        if: (github.event_name == 'push')

        steps:
            - uses: actions/checkout@v2

            - name: Install NuGet
              uses: NuGet/setup-nuget@v1

            - name: Setup Git
              shell: bash
              run: |
                  git config --global core.autocrlf false
                  git config --global core.longpaths true
                  git fetch --prune --unshallow
                  git submodule -q update --init --recursive

            - name: Pack
              shell: pwsh
              run: ./ci-pack.ps1

            - name: Publish to MyGet
              shell: pwsh
              run: |
                  nuget.exe push .\artifacts\*.nupkg ${{secrets.MYGET_TOKEN}} -Source https://www.myget.org/F/sixlabors/api/v2/package
                  nuget.exe push .\artifacts\*.snupkg ${{secrets.MYGET_TOKEN}} -Source https://www.myget.org/F/sixlabors/api/v3/index.json
              # TODO: If github.ref starts with 'refs/tags' then it was tag push and we can optionally push out package to nuget.org
